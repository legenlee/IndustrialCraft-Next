buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        maven { url 'https://maven.parchmentmc.org' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

plugins {
    id 'eclipse'
    id 'maven-publish'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

version = '0.1-build-' + project.property('buildnumber')
group = 'industrialcraft' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'IndustrialCraft-Next'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

sourceSets {
    api {
        resources {
            srcDirs = []
        }
        compileClasspath = main.compileClasspath
    }

    main {
        resources {
            srcDir 'src/generated/resources'
        }
        compileClasspath += api.output
        runtimeClasspath += api.output
    }
}

minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    mappings channel: mapping_channel, version: mapping_version

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'icnext'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                icnext {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'icnext'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                icnext {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'icnext'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                icnext {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            forceExit false

            args '--mod', 'icnext', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                icnext {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }
    }
}

repositories {
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

def getManifestAttributes(String name) {
    return [
            "Specification-Title"     : name,
            "Specification-Vendor"    : "LegenLee",
            "Specification-Version"   : project.jar.archiveVersion,
            "Implementation-Title"    : name,
            "Implementation-Version"  : project.jar.archiveVersion,
            "Implementation-Vendor"   : "LegenLee",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
    ]
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes(getManifestAttributes("IndustrialCraft-Next"))
    }
    from([sourceSets.api.output, sourceSets.main.output])
    afterEvaluate { finalizedBy reobfJar }
}

task apiJar(type: Jar) {
    archiveClassifier.set("api")
    manifest {
        attributes(getManifestAttributes("IndustrialCraft-Next"))
    }
    from sourceSets.api.output
    afterEvaluate { finalizedBy reobfApiJar }
}

task sourcesJar(type: Jar, dependsOn: [classes, apiClasses]) {
    archiveClassifier.set("sources")
    manifest {
        attributes(getManifestAttributes("IndustrialCraft-Next"))
    }
    from(sourceSets.api.allJava, sourceSets.main.allJava)
}

artifacts {
    archives apiJar
    archives sourcesJar
    archives jar
}

reobf {
    apiJar { classpath.from(sourceSets.api.compileClasspath) }
    jar { classpath.from(sourceSets.main.compileClasspath) }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourcesJar
            artifact apiJar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
